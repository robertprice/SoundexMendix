// This file was generated by Mendix Modeler.
//
// WARNING: Only the following code will be retained when actions are regenerated:
// - the import list
// - the code between BEGIN USER CODE and END USER CODE
// - the code between BEGIN EXTRA CODE and END EXTRA CODE
// Other code you write will be lost the next time you deploy the project.
// Special characters, e.g., é, ö, à, etc. are supported in comments.

package soundex.actions;

import com.mendix.systemwideinterfaces.core.IContext;
import com.mendix.webui.CustomJavaAction;

/**
 * Soundex is a phonetic algorithm for indexing names by sound, as pronounced in English. The goal is for homophones to be encoded to the same representation so that they can be matched despite minor differences in spelling.
 *
 * Pass in a single word to this action and it's encoded version will be returned.
 *
 * For example, "There", "their", and "they're" all encode to "" as they sound the same.
 *
 * For more information: https://en.wikipedia.org/wiki/Soundex
 *
 */
public class Soundex extends CustomJavaAction<java.lang.String>
{
	private java.lang.String InputString;

	public Soundex(IContext context, java.lang.String InputString)
	{
		super(context);
		this.InputString = InputString;
	}

	@Override
	public java.lang.String executeAction() throws Exception
	{
		// BEGIN USER CODE
		//throw new com.mendix.systemwideinterfaces.MendixRuntimeException("Java action was not implemented");

        char[] x = this.InputString.toUpperCase().toCharArray();


        char firstLetter = x[0];

        //RULE [ 2 ]
        //Convert letters to numeric code
        for (int i = 0; i < x.length; i++) {
            switch (x[i]) {
            case 'B':
            case 'F':
            case 'P':
            case 'V': {
                x[i] = '1';
                break;
            }

            case 'C':
            case 'G':
            case 'J':
            case 'K':
            case 'Q':
            case 'S':
            case 'X':
            case 'Z': {
                x[i] = '2';
                break;
            }

            case 'D':
            case 'T': {
                x[i] = '3';
                break;
            }

            case 'L': {
                x[i] = '4';
                break;
            }

            case 'M':
            case 'N': {
                x[i] = '5';
                break;
            }

            case 'R': {
                x[i] = '6';
                break;
            }

            default: {
                x[i] = '0';
                break;
            }
            }
        }

        //Remove duplicates
        //RULE [ 1 ]
        String output = "" + firstLetter;

        //RULE [ 3 ]
        for (int i = 1; i < x.length; i++)
            if (x[i] != x[i - 1] && x[i] != '0')
                output += x[i];

        //RULE [ 4 ]
        //Pad with 0's or truncate
        output = output + "0000";
        return output.substring(0, 4);
		// END USER CODE
	}

	/**
	 * Returns a string representation of this action
	 */
	@Override
	public java.lang.String toString()
	{
		return "Soundex";
	}

	// BEGIN EXTRA CODE
	// END EXTRA CODE
}
